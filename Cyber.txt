const express = require('express');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const mongoSanitize = require('express-mongo-sanitize');
const xss = require('xss');
const compression = require('compression');
const csrf = require('csurf');
const session = require('express-session');
const cors = require('cors');
const { body, validationResult } = require('express-validator');

const app = express();

// تأمين التطبيق باستخدام Helmet
app.use(helmet());

// فرض حدود على عدد الطلبات
const limiter = rateLimit({
  max: 100,
  windowMs: 60 * 60 * 1000,
  message: 'Too many requests from this IP, please try again in an hour!'
});
app.use('/api', limiter);

// تصفية البيانات المدخلة من هجمات XSS
app.use(xss());

// تحقق من صحة البيانات المدخلة باستخدام express-validator
app.use(body().customSanitizer(value => {
  // قم بتطبيق أي عمليات تنقية أو تحقق أخرى هنا
  return value;
}));

// تحقق من صحة البيانات المدخلة من المستخدمين
app.use(express.json({ limit: '10kb' }));
app.use(express.urlencoded({ extended: true, limit: '10kb' }));

// تنقية البيانات لمنع هجمات استغلال ثغرات NoSQL Injection
app.use(mongoSanitize());

// ضغط البيانات المرسلة إلى المتصفح
app.use(compression());

// تطبيق حماية ضد هجمات Cross-Site Request Forgery (CSRF)
app.use(csrf({ cookie: true }));

// إضافة جلسات لإدارة حالة الجلسة لكل عميل
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: true }
}));

// إعدادات مراقبة الوصول عبر الموارد (CORS)
app.use(cors());

// Middleware خاص بالتحقق من صحة البيانات
const validateData = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

// تحقق من صحة البيانات باستخدام express-validator
app.post('/data', [
  body('username').isString(),
  body('email').isEmail(),
], validateData, (req, res) => {
  // المعالجة هنا
});

// قم بإضافة المزيد من الـ Middleware حسب احتياجات تطبيقك

// استمع على المنفذ المحدد
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

// app.enable('trust proxy');
// app.use(helmet());

// const limiter = rateLimit({
//   max: 100,
//   windowMs: 60 * 60 * 1000,
//   message: 'Too many requests from this IP, please try again in an hour!'
// });
// app.use('/api', limiter);


// app.use(xss());


// Data sanitization against NoSQL query injection
// app.use(mongoSanitize());

// Body parser, reading data from body into req.body
// app.use(express.json({ limit: '10kb' }));
// app.use(express.urlencoded({ extended: true, limit: '10kb' }));
// app.use(cookieParser());

// app.use(compression());